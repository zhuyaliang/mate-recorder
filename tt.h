/*
 * This file is generated by gdbus-codegen, do not modify it.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from. Note that it links to GLib, so must comply with the
 * LGPL linking clauses.
 */

#ifndef __TT_H__
#define __TT_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.admin.screen */

#define TYPE_SCREEN (screen_get_type ())
#define SCREEN(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_SCREEN, Screen))
#define IS_SCREEN(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_SCREEN))
#define SCREEN_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_SCREEN, ScreenIface))

struct _Screen;
typedef struct _Screen Screen;
typedef struct _ScreenIface ScreenIface;

struct _ScreenIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_screencast_area) (
    Screen *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_area,
    const gchar *arg_file_name,
    gint arg_framerate,
    gboolean arg_draw_cursor,
    const gchar *arg_video_format);

  gboolean (*handle_screencast_full) (
    Screen *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_file_name,
    gint arg_framerate,
    gboolean arg_draw_cursor,
    const gchar *arg_video_format);

  gboolean (*handle_screencast_pause) (
    Screen *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_screencast_stop) (
    Screen *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_screencast_unpause) (
    Screen *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_screencast_xid) (
    Screen *object,
    GDBusMethodInvocation *invocation,
    guint arg_xid,
    const gchar *arg_file_name,
    gint arg_framerate,
    gboolean arg_draw_cursor,
    const gchar *arg_video_format);

  const gchar * (*get_daemon_version) (Screen *object);

};

GType screen_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *screen_interface_info (void);
guint screen_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void screen_complete_screencast_full (
    Screen *object,
    GDBusMethodInvocation *invocation,
    gboolean success);

void screen_complete_screencast_area (
    Screen *object,
    GDBusMethodInvocation *invocation,
    gboolean success);

void screen_complete_screencast_xid (
    Screen *object,
    GDBusMethodInvocation *invocation,
    gboolean success);

void screen_complete_screencast_pause (
    Screen *object,
    GDBusMethodInvocation *invocation,
    gboolean success);

void screen_complete_screencast_unpause (
    Screen *object,
    GDBusMethodInvocation *invocation,
    gboolean success);

void screen_complete_screencast_stop (
    Screen *object,
    GDBusMethodInvocation *invocation,
    gboolean success);



/* D-Bus method calls: */
void screen_call_screencast_full (
    Screen *proxy,
    const gchar *arg_file_name,
    gint arg_framerate,
    gboolean arg_draw_cursor,
    const gchar *arg_video_format,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean screen_call_screencast_full_finish (
    Screen *proxy,
    gboolean *out_success,
    GAsyncResult *res,
    GError **error);

gboolean screen_call_screencast_full_sync (
    Screen *proxy,
    const gchar *arg_file_name,
    gint arg_framerate,
    gboolean arg_draw_cursor,
    const gchar *arg_video_format,
    gboolean *out_success,
    GCancellable *cancellable,
    GError **error);

void screen_call_screencast_area (
    Screen *proxy,
    GVariant *arg_area,
    const gchar *arg_file_name,
    gint arg_framerate,
    gboolean arg_draw_cursor,
    const gchar *arg_video_format,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean screen_call_screencast_area_finish (
    Screen *proxy,
    gboolean *out_success,
    GAsyncResult *res,
    GError **error);

gboolean screen_call_screencast_area_sync (
    Screen *proxy,
    GVariant *arg_area,
    const gchar *arg_file_name,
    gint arg_framerate,
    gboolean arg_draw_cursor,
    const gchar *arg_video_format,
    gboolean *out_success,
    GCancellable *cancellable,
    GError **error);

void screen_call_screencast_xid (
    Screen *proxy,
    guint arg_xid,
    const gchar *arg_file_name,
    gint arg_framerate,
    gboolean arg_draw_cursor,
    const gchar *arg_video_format,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean screen_call_screencast_xid_finish (
    Screen *proxy,
    gboolean *out_success,
    GAsyncResult *res,
    GError **error);

gboolean screen_call_screencast_xid_sync (
    Screen *proxy,
    guint arg_xid,
    const gchar *arg_file_name,
    gint arg_framerate,
    gboolean arg_draw_cursor,
    const gchar *arg_video_format,
    gboolean *out_success,
    GCancellable *cancellable,
    GError **error);

void screen_call_screencast_pause (
    Screen *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean screen_call_screencast_pause_finish (
    Screen *proxy,
    gboolean *out_success,
    GAsyncResult *res,
    GError **error);

gboolean screen_call_screencast_pause_sync (
    Screen *proxy,
    gboolean *out_success,
    GCancellable *cancellable,
    GError **error);

void screen_call_screencast_unpause (
    Screen *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean screen_call_screencast_unpause_finish (
    Screen *proxy,
    gboolean *out_success,
    GAsyncResult *res,
    GError **error);

gboolean screen_call_screencast_unpause_sync (
    Screen *proxy,
    gboolean *out_success,
    GCancellable *cancellable,
    GError **error);

void screen_call_screencast_stop (
    Screen *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean screen_call_screencast_stop_finish (
    Screen *proxy,
    gboolean *out_success,
    GAsyncResult *res,
    GError **error);

gboolean screen_call_screencast_stop_sync (
    Screen *proxy,
    gboolean *out_success,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
const gchar *screen_get_daemon_version (Screen *object);
gchar *screen_dup_daemon_version (Screen *object);
void screen_set_daemon_version (Screen *object, const gchar *value);


/* ---- */

#define TYPE_SCREEN_PROXY (screen_proxy_get_type ())
#define SCREEN_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_SCREEN_PROXY, ScreenProxy))
#define SCREEN_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_SCREEN_PROXY, ScreenProxyClass))
#define SCREEN_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_SCREEN_PROXY, ScreenProxyClass))
#define IS_SCREEN_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_SCREEN_PROXY))
#define IS_SCREEN_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_SCREEN_PROXY))

typedef struct _ScreenProxy ScreenProxy;
typedef struct _ScreenProxyClass ScreenProxyClass;
typedef struct _ScreenProxyPrivate ScreenProxyPrivate;

struct _ScreenProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  ScreenProxyPrivate *priv;
};

struct _ScreenProxyClass
{
  GDBusProxyClass parent_class;
};

GType screen_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ScreenProxy, g_object_unref)
#endif

void screen_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
Screen *screen_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
Screen *screen_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void screen_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
Screen *screen_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
Screen *screen_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TYPE_SCREEN_SKELETON (screen_skeleton_get_type ())
#define SCREEN_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_SCREEN_SKELETON, ScreenSkeleton))
#define SCREEN_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_SCREEN_SKELETON, ScreenSkeletonClass))
#define SCREEN_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_SCREEN_SKELETON, ScreenSkeletonClass))
#define IS_SCREEN_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_SCREEN_SKELETON))
#define IS_SCREEN_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_SCREEN_SKELETON))

typedef struct _ScreenSkeleton ScreenSkeleton;
typedef struct _ScreenSkeletonClass ScreenSkeletonClass;
typedef struct _ScreenSkeletonPrivate ScreenSkeletonPrivate;

struct _ScreenSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  ScreenSkeletonPrivate *priv;
};

struct _ScreenSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType screen_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ScreenSkeleton, g_object_unref)
#endif

Screen *screen_skeleton_new (void);


G_END_DECLS

#endif /* __TT_H__ */
